import material/material;
import definition;

VC(fi : Formula, oper : Body, psi : [Formula]) -> [Formula] {
	switch(oper){
		Assign(v, expr) : map(psi, \f -> Pred(fi, "->", replaceVar(f, v, expr)));
		Test(xi) : map(psi, \f -> Pred(fi, "->", Pred(xi, "->", f)));
		Block(ins) : {
			len = length(ins) - 1;
			if (len == 0) VC(fi, ins[len], psi)
			else VC(fi, Block(take(ins, len)), VC(TRUE(), ins[len], psi));
		};
		Union(b, c) : concat(VC(fi, b, psi), VC(fi, c, psi));
		Iter(b, xi) : concat([Pred(fi, "->", xi)], VC(xi, b, [xi]));
	}
}

replaceVar(f : Formula, v : Var, expr : Expr) -> Formula {
	switch(f){
		Pred(p1, opr, p2) : Pred(replaceVar(p1, v, expr), opr, replaceVar(p2, v, expr));
		Not(p) : Not(replaceVar(p, v, expr));
		Compare(e1, opr, e2) : Compare(recalc(e1, v, expr), opr, recalc(e2, v, expr));
		All(def, p) : if (v == getVar(def)) All(def, p) else All(def, replaceVar(p, v, expr));
		Exist(def, p) : if (v == getVar(def)) Exist(def, p) else Exist(def, replaceVar(p, v, expr));
		default : f;
	}
}

recalc(e : Expr, v : Var, expr : Expr) -> Expr {
	switch(e){
		Arifm(p, op, q) : Arifm(recalc(p, v, expr), op, recalc(q, v, expr));
		APP(arr, ind) : APP(arr, recalc(ind, v, expr));
		UPD(arr, ind, val) : UPD(arr, recalc(ind, v, expr), recalc(val, v, expr));
		Var(w) : if (v == e) v else e; 
		default : e;
	}
}

getVar(def : Def) -> Var {
	switch(def){
		Def(v, t) : v;
	}
}

getPred(t : HoareTrio) -> Formula {
	switch(t){
		HoareTrio(fi, prog, psi) : 
			switch(fi){
				Precond(defs, f) : f;
			};
	}
}

getBody(t : HoareTrio) -> [Body] {
	switch(t){
		HoareTrio(fi, prog, psi) : 
			switch(prog){
				Prog(defs, body) : body;
			}
	}
}

getPost(t : HoareTrio) -> [Formula] {
	switch(t){
		HoareTrio(fi, prog, psi) : 
			switch(psi){
				Postcond(f) : [f];
			}
	}
}

main(){
	str = getFileContent("spec.txt");
	trio = s2t(str);
	fi = getPred(trio);
	bodys = getBody(trio);
	psi = getPost(trio);
	map(map(bodys, \b -> VC(fi, b, psi)), \i -> map(i, println));
}