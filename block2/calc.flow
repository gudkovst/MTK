import lingo/pegcode/driver;
import material/material;


TERM ::= Sum, Sub, Mul, Div, Const, Var;
Sum : (p : TERM, q : TERM);
Sub : (p : TERM, q : TERM);
Mul : (p : TERM, q : TERM);
Div : (p : TERM, q : TERM);
Const : (p : int);
Var : (p : string);

s2t(term : string) -> flow {
	lingoGrammarOp : ref Maybe<[PegOp]> = ref None();
	parsic(onlyOnce(lingoGrammarOp, \ -> {
			   compilePegGrammar("#include arifmGrammar.lingo");
		   }), term, defaultPegActions);
}

t2s(t : TERM) -> string {
	switch (t) {
		Sum(p, q) : "(" + t2s(p) + " + " + t2s(q) + ")";
		Sub(p, q) : "(" + t2s(p) + " - " + t2s(q) + ")";
		Mul(p, q) : "(" + t2s(p) + " * " + t2s(q) + ")";
		Div(p, q) : "(" + t2s(p) + " / " + t2s(q) + ")";
		Const(p) : if (p < 0) "(" + i2s(p) + ")" else i2s(p);
		Var(p) : p;
	}
}

calc(t : TERM, vars) -> int {
	switch(t){
		Sum(p, q) : calc(p, vars) + calc(q, vars);
		Sub(p, q) : calc(p, vars) - calc(q, vars);
		Mul(p, q) : calc(p, vars) * calc(q, vars);
		Div(p, q) : calc(p, vars) / calc(q, vars);
		Const(p) : p;
		Var(p) : getTreeArrayValue(vars, p)[0];
	}
}

findVars(t : TERM, vars : Tree<string, [int]>) -> Tree<string, [int]> {
	switch(t){
		Var(p) : {
			if (!containsKeyTree(vars, p)){
				print(p + " = ");
				val = s2i(readUntil("\n"));
				setTree(vars, p, [val]);
			}
			else vars;
		};
		Const(p) : vars;
		Sum(p, q) : { v = findVars(p, vars); findVars(q, v);};
		Sub(p, q) : { v = findVars(p, vars); findVars(q, v)};
		Mul(p, q) : { v = findVars(p, vars); findVars(q, v);};
		Div(p, q) : { v = findVars(p, vars); findVars(q, v);};
	}
}

getVariables() -> Tree<string, [int]> {
	parameters = getAllUrlParametersArray();
	println(parameters);
	fold(parameters, makeTree(), \tree, parameter -> {
			setTree(tree, parameter[0], [s2i(parameter[1])])
		}
	);
}

main() {
	term = s2t(getFileContent("test.txt"));
	println(term);
	println(t2s(term));
	vars : Tree<string, [int]> = findVars(term, makeTree());
	//vars : Tree<string, [int]> = getVariables();
	println(calc(term, vars));
	quit(0);
}
