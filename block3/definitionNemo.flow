import lingo/pegcode/driver;
import material/material;

export{

Prog : (defs : [Def], body : [Body]);

Body ::= Union, Iter, Block, Assign, Test;
Assign : (v : Var, expr : Expr);
Test : (p : LogExpr);
Union : (b : Body, c : Body);
Iter : (b : Body);
Block : (ins : [Instr]);
Instr ::= Assign, Test, Body;

//common in nemo and VMnemo

Def : (v : Var, t : Type);
Type ::= Int, Array;
Int : ();
Array : (ind : Type, val : Type);

LogExpr ::= Pred, Not, Compare, TRUE, FALSE;
Pred : (p1 : LogExpr, opr : string, p2 : LogExpr);
Not : (p : LogExpr);
Compare : (e1 : Expr, opr : string, e2 : Expr);
TRUE : ();
FALSE : ();
Expr ::= Arifm, APP, UPD, Var, Const;
Arifm ::= Sum, Sub, Mul, Div;
Sum : (p : Expr, q : Expr);
Sub : (p : Expr, q : Expr);
Mul : (p : Expr, q : Expr);
Div : (p : Expr, q : Expr);
APP : (arr : Var, ind : Expr);
UPD : (arr : Var, ind : Expr, val : Expr);
Const : (p : int);
Var : (p : string);

	s2p(prog : string) -> Prog;
}

s2p(prog : string) -> Prog {
	lingoGrammarOp : ref Maybe<[PegOp]> = ref None();
	parsic(onlyOnce(lingoGrammarOp, \ -> {
			   compilePegGrammar("#include nemo.lingo");
		   }), prog, defaultPegActions);
}

printProg(prog : Prog) {
	switch(prog){
		Prog(defs, bodys) : {
			map(defs, println);
			map(bodys, printBody);
		}
	}
}

printBody(body : Body) {
	switch(body){
		Block(ins) : {
			println("{");
			map(ins, printBody);
			println("}");
		};
		Union(b, c) : {
			println("{");
			printBody(b);
			println("UNION");
			printBody(c);
			println("}");
		};
		Iter(b) : {
			println("Iter {");
			printBody(b);
			println("}");
		};
		default : println(body);
	}
}

main(){
	str = getFileContent("VMexec.txt");
	prog = s2p(str);
	printProg(prog);
	quit(0);
}