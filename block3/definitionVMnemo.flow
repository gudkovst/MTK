import lingo/pegcode/driver;
import material/material;
import definitionNemo;

export{

VMProg : (defs : [Def], op : [Oper]);
Oper ::= Assgn, If;
Assgn : (m : Mark, v : Var, e : Expr, s : SetMark);
If : (m : Mark, p : LogExpr, t : SetMark, f : SetMark);

Mark : (m : int);
SetMark : (marks : [Mark]);

//everything else is defined in definitionNemo

//methods for manipulation entity VMnemo
	getValueMark(m : Mark) -> int;
	getMaxValueMark(s : SetMark) -> int;
	getArrayValueMarks(s : SetMark) -> [int];
	getMark(op : Oper) -> Mark;
	s2VMp(prog : string) -> VMProg;
	printVMProg(prog : VMProg) -> [void];
}

getValueMark(m : Mark) -> int {
	switch(m){
		Mark(i) : i;
	}
}

getMark(op : Oper) -> Mark {
	switch(op){
		Assgn(m, v, e, s) : m;
		If(m, p, t, f) : m;
	}
}

getMaxValueMark(s : SetMark) -> int {
	switch(s){
		SetMark(marks) : if (length(marks) == 0) 0
						else fold(map(marks, getValueMark), getValueMark(marks[0]), max);
	}
}

getArrayValueMarks(s : SetMark) -> [int] {
	switch(s){
		SetMark(marks) : map(marks, getValueMark);
	}
}

s2VMp(prog : string) -> VMProg {
	lingoGrammarOp : ref Maybe<[PegOp]> = ref None();
	parsic(onlyOnce(lingoGrammarOp, \ -> {
			   compilePegGrammar("#include VMnemo.lingo");
		   }), prog, defaultPegActions);
}

printVMProg(prog : VMProg){
	switch(prog){
		VMProg(defs, opers) : {
			map(defs, println);
			map(opers, println);
		}
	}
}

main(){
	str = getFileContent("VMnemo.txt");
	prog = s2VMp(str);
	printVMProg(prog);
	quit(0);
}