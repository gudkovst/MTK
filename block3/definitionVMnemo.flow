import lingo/pegcode/driver;
import material/material;

VMProg : (defs : [Definit], op : [Oper]);
Oper ::= Assgn, If;
Assgn : (m : Mark, v : VMVar, e : VMExpr, s : SetMark);
If : (m : Mark, p : VMLogVMExpr, t : SetMark, f : SetMark);

Definit : (v : VMVar, t : VMType);
VMType ::= VMInt, VMArray;
VMInt : ();
VMArray : (ind : VMType, val : VMType);

Mark : (m : int);
SetMark : (marks : [Mark]);

VMLogVMExpr ::= VMPred, VMNot, VMExpr;
VMPred : (e1 : VMExpr, opr : string, e2 : VMExpr);
VMNot : (p : VMPred);
VMExpr ::= VMArifm, VMAPP, VMUPD, VMVar, VMConst;
VMArifm ::= Sum, Sub, Mul, Div;
Sum : (p : VMExpr, q : VMExpr);
Sub : (p : VMExpr, q : VMExpr);
Mul : (p : VMExpr, q : VMExpr);
Div : (p : VMExpr, q : VMExpr);
VMAPP : (e1 : VMExpr, e2 : VMExpr);
VMUPD : (e1 : VMExpr, e2 : VMExpr, e3 : VMExpr);
VMConst : (p : int);
VMVar : (p : string);

s2p(prog : string) -> VMProg {
	lingoGrammarOp : ref Maybe<[PegOp]> = ref None();
	parsic(onlyOnce(lingoGrammarOp, \ -> {
			   compilePegGrammar("#include VMnemo.lingo");
		   }), prog, defaultPegActions);
}

printVMProg(prog : VMProg){
	switch(prog){
		VMProg(defs, opers) : {
			map(defs, println);
			map(opers, println);
		}
	}
}

main(){
	str = getFileContent("VMnemo.txt");
	//println(str);
	prog = s2p(str);
	printVMProg(prog);
	quit(0);
}