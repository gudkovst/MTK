program = ws definition*:def ws operator*:op ws {VMProg(:def, :op)};

definition = ws "VAR" ws variable:v ws ":" ws type:t ws ";" ws {Definit(:v, :t)};

type = ws "INT" ws {VMInt()} | ws "(" ws type:ind ws "ARRAY OF " ws type:t ws ")" ws {VMArray(:ind, :t)};

operator =  mark:m ws ":" ws variable:v ws ":=" ws expr:e ws "goto" ws set:s ws {Assgn(:m, :v, :e, :s)} |
			mark:m ws ":" ws "if" ws predicat:p ws "then" ws set:t ws "else" ws set:f ws {If(:m, :p, :t, :f)};

mark = (digit+)$d {Mark(s2i($d))};

set = "{" ws element*:m ws "}" ws {SetMark(:m)};
element = mark:m ws "," ws {:m} | mark:m ws {:m};

predicat =  "(" ws predicat:p1 ws logicOperator:lop ws predicat:p2 ws ")" ws {VMPred(:p1, :lop, :p2)} |
			"(" ws "NOT" ws predicat:p ws ")" ws {VMNot(:p)} | "(" ws predicat:p ws ")" ws {:p} | expr:e {:e} | "TRUE"$s ws {$s} | "FALSE"$s ws {$s};

expr = arifmExpr:e ws {:e} | funcExpr:e ws {:e} | const:c ws {:c} | variable:v ws {:v} | "(" ws expr:e ws ")" ws {:e};

arifmExpr = "(" ws expr:t "+" ws expr:p ")" ws {Sum(:t, :p)} |
			"(" ws expr:t "-" ws expr:p ")" ws {Sub(:t, :p)} |
			"(" ws expr:t "*" ws expr:p ")" ws {Mul(:t, :p)} |
			"(" ws expr:t "/" ws expr:p ")" ws {Div(:t, :p)};

funcExpr = "APP(" expr:e1 ", " expr:e2 ")" ws {VMAPP(:e1, :e2)} | 
		   "UPD(" expr:e1 ", " expr:e2 ", " expr:e3 ")" ws {VMUPD(:e1, :e2, :e3)};

logicOperator = ("=" | "<=" | ">=" | "<" | ">" | "!=" | "OR" | "AND")$s ws {$s};

variable = (('a' - 'z')+ digit*)$v ws {VMVar($v)}; 
const = ("-"? digit+)$c ws {VMConst(s2i($c))};
digit = '0' - '9';
ws = (" " | "\t" | "\n" | "\r")*; 